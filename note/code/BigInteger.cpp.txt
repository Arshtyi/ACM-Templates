class BigInteger
{
private:
    vector<int> digits; // 倒序
    bool isNegative;
public:
    BigInteger(int value = 0) : isNegative(value < 0)
    {
        if (isNegative) value = -value;
        if (value == 0) digits.push_back(0);
        while (value > 0) digits.push_back(value % 10), value /= 10;
    }
    BigInteger(const string &value)
    {
        isNegative = (value[0] == '-');
        for (int i = value.size() - 1; i >= (isNegative ? 1 : 0); --i) digits.push_back(value[i] - '0');
        if (digits.empty()) digits.push_back(0);
    }
    BigInteger(const BigInteger &rhs) : digits(rhs.digits), isNegative(rhs.isNegative) {}
    void trim()
    {
        while (digits.size() > 1 && digits.back() == 0) digits.pop_back();
        if (digits.size() == 1 && digits[0] == 0) isNegative = false;
    }
    int absCompare(const BigInteger &rhs) const
    {
        if (digits.size() != rhs.digits.size()) return digits.size() > rhs.digits.size() ? 1 : -1;
        for (int i = digits.size() - 1; i >= 0; --i) if (digits[i] != rhs.digits[i]) return digits[i] > rhs.digits[i] ? 1 : -1;
        return 0;
    }
    BigInteger operator+(const BigInteger &b) const
    {
        if (isNegative == b.isNegative)
        {
            BigInteger res;
            res.isNegative = isNegative;
            res.digits.clear();
            int carry = 0, n = max(digits.size(), b.digits.size());
            for (int i = 0; i < n || carry; ++i)
            {
                int x = carry;
                if (i < digits.size()) x += digits[i];
                if (i < b.digits.size()) x += b.digits[i];
                res.digits.push_back(x % 10), carry = x / 10;
            }
            res.trim();
            return res;
        }
        else
        {
            if (isNegative)
            {
                BigInteger tmp = *this;
                tmp.isNegative = false;
                return b - tmp;
            }
            else
            {
                BigInteger tmp = b;
                tmp.isNegative = false;
                return *this - tmp;
            }
        }
    }
    BigInteger operator-(const BigInteger &b) const
    {
        if (!isNegative && b.isNegative) return *this + (-b);
        if (isNegative && !b.isNegative) return -((-*this) + b);
        if (isNegative && b.isNegative) return (-b) - (-*this);
        if (absCompare(b) < 0) return -(b - *this);
        BigInteger res;
        res.digits.clear();
        int borrow = 0;
        for (size_t i = 0; i < digits.size(); ++i)
        {
            int x = digits[i] - borrow - (i < b.digits.size() ? b.digits[i] : 0);
            if (x < 0) x += 10, borrow = 1;
            else borrow = 0;
            res.digits.push_back(x);
        }
        res.trim();
        return res;
    }
    BigInteger operator-() const
    {
        BigInteger res = *this;
        if (!(digits.size() == 1 && digits[0] == 0)) res.isNegative = !isNegative;
        return res;
    }
    BigInteger operator*(const BigInteger &b) const
    {
        BigInteger res;
        res.digits.assign(digits.size() + b.digits.size(), 0);
        for (size_t i = 0; i < digits.size(); ++i)
        {
            int carry = 0;
            for (size_t j = 0; j < b.digits.size() || carry; ++j)
            {
                int cur = res.digits[i + j] + digits[i] * (j < b.digits.size() ? b.digits[j] : 0) + carry;
                res.digits[i + j] = cur % 10, carry = cur / 10;
            }
        }
        res.isNegative = isNegative != b.isNegative;
        res.trim();
        return res;
    }
    BigInteger operator/(const BigInteger &b) const
    {
        if (b == 0) throw runtime_error("BigInteger divide by zero");
        BigInteger a = *this, d = b;
        a.isNegative = d.isNegative = false;
        BigInteger res, cur;
        res.digits.resize(a.digits.size());
        for (int i = a.digits.size() - 1; i >= 0; --i)
        {
            cur.digits.insert(cur.digits.begin(), a.digits[i]);
            cur.trim();
            int x = 0, l = 0, r = 9;
            while (l <= r)
            {
                int m = (l + r) / 2;
                BigInteger t = d * m;
                if (t <= cur) x = m, l = m + 1;
                else r = m - 1;
            }
            res.digits[i] = x, cur = cur - d * x;
        }
        res.isNegative = isNegative != b.isNegative;
        res.trim();
        return res;
    }
    BigInteger operator%(const BigInteger &b) const { return *this - *this / b * b; }
    BigInteger &operator=(const BigInteger &b)
    {
        digits = b.digits;
        isNegative = b.isNegative;
        return *this;
    }
    BigInteger &operator+=(const BigInteger &b) { return *this = *this + b; }
    BigInteger &operator-=(const BigInteger &b) { return *this = *this - b; }
    BigInteger &operator*=(const BigInteger &b) { return *this = *this * b; }
    BigInteger &operator/=(const BigInteger &b) { return *this = *this / b; }
    BigInteger &operator%=(const BigInteger &b) { return *this = *this % b; }
    bool operator!=(const BigInteger &b) const { return isNegative != b.isNegative || digits != b.digits; }
    bool operator==(const BigInteger &b) const { return isNegative == b.isNegative && digits == b.digits; }
    bool operator<(const BigInteger &b) const
    {
        if (isNegative != b.isNegative) return isNegative;
        int cmp = absCompare(b);
        return isNegative ? cmp > 0 : cmp < 0;
    }
    bool operator<=(const BigInteger &b) const { return *this < b || *this == b; }
    bool operator>(const BigInteger &b) const { return !(*this <= b); }
    bool operator>=(const BigInteger &b) const { return !(*this < b); }
    friend ostream &operator<<(ostream &os, const BigInteger &b)
    {
        if (b.isNegative) os << '-';
        for (int i = b.digits.size() - 1; i >= 0; --i) os << b.digits[i];
        return os;
    }
    friend istream &operator>>(istream &is, BigInteger &b)
    {
        string s;
        is >> s;
        b = BigInteger(s);
        return is;
    }
};
