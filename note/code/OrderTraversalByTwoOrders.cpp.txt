// 1. 已知前序、中序求后序
vector<int> preInToPost(int n, vector<int> pre, vector<int> in)
{
    unordered_map<int, int> inIndex;
    for (int i = 0; i < n; ++i) inIndex[in[i]] = i;
    vector<int> res;
    function<void(int, int, int, int)> build = [&](int pl, int pr, int il, int ir)
    {
        if (pl > pr) return;
        int root = pre[pl], idx = inIndex[root], leftLen = idx - il;
        build(pl + 1, pl + leftLen, il, idx - 1), build(pl + leftLen + 1, pr, idx + 1, ir);
        res.push_back(root);
    };
    build(0, n - 1, 0, n - 1);
    return res;
}
// 2. 已知前序、后序求中序（假设树为满二叉树，否则不唯一）
vector<int> prePostToIn(int n, vector<int> pre, vector<int> post)
{
    unordered_map<int, int> postIndex;
    for (int i = 0; i < n; ++i) postIndex[post[i]] = i;
    vector<int> res;
    function<void(int, int, int, int)> build = [&](int prel, int prer, int postl, int postr)
    {
        if (prel > prer) return;
        if (prel == prer) { res.push_back(pre[prel]); return; }
        int root = pre[prel], leftRoot = pre[prel + 1], idx = postIndex[leftRoot], leftLen = idx - postl + 1;
        build(prel + 1, prel + leftLen, postl, idx);
        res.push_back(root);
        build(prel + leftLen + 1, prer, idx + 1, postr - 1);
    };
    build(0, n - 1, 0, n - 1);
    return res;
}
// 3. 已知中序、后序求前序
vector<int> inPostToPre(int n, vector<int> in, vector<int> post)
{
    unordered_map<int, int> inIndex;
    for (int i = 0; i < n; ++i) inIndex[in[i]] = i;
    vector<int> res;
    function<void(int, int, int, int)> build = [&](int il, int ir, int pl, int pr)
    {
        if (il > ir) return;
        int root = post[pr], idx = inIndex[root], leftLen = idx - il;
        res.push_back(root);
        build(il, idx - 1, pl, pl + leftLen - 1);
        build(idx + 1, ir, pl + leftLen, pr - 1);
    };
    build(0, n - 1, 0, n - 1);
    return res;
}
