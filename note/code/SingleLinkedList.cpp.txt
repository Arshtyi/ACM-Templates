struct Node
{
    int data;
    Node *next;
    Node(int val) : data(val), next(nullptr) {}
};
class SingleLinkedList
{
private:
    Node *head, *tail;
    int size;

public:
    SingleLinkedList() : head(nullptr), tail(nullptr), size(0) {} // 默认构造函数
    SingleLinkedList(vector<int> values) : head(nullptr), tail(nullptr), size(0) { for (int val : values) append(val); } // 根据数组构造链表
    void append(int val)
    {
        Node *newNode = new Node(val);
        if (!head) head = tail = newNode;
        else tail->next = newNode, tail = newNode;
        size++;
    } // 追加节点
    void prepend(int val)
    {
        Node *newNode = new Node(val);
        if (!head) head = tail = newNode;
        else newNode->next = head, head = newNode;
        size++;
    } // 前向追加节点
    void remove(int index)
    {
        if (index < 1 || index > size) return; // 无效位置
        Node *current = head;
        if (index == 1) // 移除头节点
        {
            head = head->next;
            delete current;
        }
        else
        {
            for (int i = 1; i < index - 1; i++) current = current->next;
            Node *toDelete = current->next, current->next = toDelete->next;
            if (toDelete == tail) tail = current;
            delete toDelete;
        }
        size--;
    } // 移除第n个节点
    void insert(int index, int val)
    {
        if (index < 1 || index > size + 1) return; // 无效位置
        Node *newNode = new Node(val);
        if (index == 1) // 在头部插入
        {
            newNode->next = head, head = newNode;
            if (!tail) tail = newNode; // 如果链表为空
        }
        else
        {
            Node *current = head;
            for (int i = 1; i < index - 1; i++) current = current->next;
            newNode->next = current->next, current->next = newNode;
            if (newNode->next == nullptr) tail = newNode; // 更新尾节点
        }
        size++;
    } // 在第index个位置插入节点
    void clear()
    {
        Node *current = head;
        while (current) Node *next = current->next, delete current, current = next;
        head = tail = nullptr;
        size = 0;
    } // 清空链表
    void display()
    {
        Node *current = head;
        while (current)
        {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    } // 展示链表
    int getSize() const { return size; } // 获取链表大小
    ~SingleLinkedList() { clear(); }     // 析构函数
};
